name: Build

permissions: {}

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  init:
    if: github.event.pull_request.merged == true
    name: Initialize
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
    - name: Initialize
      id: init
      run: |
        # Detect repo name.
        REPOSITORY=${PWD##*/}                     ; echo "REPOSITORY=$REPOSITORY"   >> $GITHUB_OUTPUT
    - name: GitOps Automatic Versioning
      id: gitops-autover
      uses: AlexAtkinson/github-action-gitops-autover@0.3.1
    outputs:
      REPOSITORY: ${{ steps.init.outputs.REPOSITORY }}
      NEW_VERSION: ${{ steps.gitops-autover.outputs.new-version }}
      PREVIOUS_VERSION: ${{ steps.gitops-autover.outputs.previous-version }}
  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: "Build"
        run: |
          echo "SUCCESSFUL BUILD" > "${{ needs.init.outputs.REPOSITORY }}.${{ needs.init.outputs.NEW_VERSION }}.txt"
          # Then bolt on extras such as slack notify or github release actions as needed.
  github-release:
    name: Github Release
    permissions:
      contents: write
    needs: [init,build]
    runs-on: ubuntu-latest
    steps:
      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: "${{ needs.init.outputs.REPOSITORY }} ${{ needs.init.outputs.NEW_VERSION }}"
          tag_name: "${{ needs.init.outputs.NEW_VERSION }}"
          prerelease: false
          generate_release_notes: true